"""
Pipeline ETL para An√°lisis de Sentimientos de Acciones
Autor: Proyecto ETL - Stock Sentiment Analysis
Fecha: Octubre 2025

Este script ejecuta el pipeline completo ETL:
1. Extract: Extrae datos del CSV
2. Transform: Limpia y transforma los datos
3. Load: Carga los datos en m√∫ltiples formatos
"""
import sys
import os
from datetime import datetime

# Agregar el directorio actual al path para imports
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from Extract.stock_extractor import StockExtractor
from Transform.stock_transformer import StockTransformer
from Load.stock_loader import StockLoader


def print_header(title: str):
    """Imprime un header formateado"""
    print("\n" + "="*70)
    print(f"  {title}")
    print("="*70)


def main():
    """Funci√≥n principal que ejecuta el pipeline ETL completo"""
    
    print_header("üöÄ PIPELINE ETL - STOCK SENTIMENT ANALYSIS")
    print(f"‚è∞ Inicio: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
    
    try:
        # ========== FASE 1: EXTRACT ==========
        print_header("üìÇ FASE 1: EXTRACT - Extracci√≥n de Datos")
        
        extractor = StockExtractor("stock_senti_analysis.csv")
        raw_data = extractor.extract_data()
        
        print("\nüìã Vista previa de datos crudos:")
        print(raw_data.head(3))
        
        # Informaci√≥n adicional
        info = extractor.get_data_info()
        print(f"\nüìä Informaci√≥n del dataset:")
        print(f"   ‚Ä¢ Filas: {info['filas']:,}")
        print(f"   ‚Ä¢ Columnas: {info['columnas']}")
        print(f"   ‚Ä¢ Memoria: {info['memoria_uso']:.2f} MB")
        
        # ========== FASE 2: TRANSFORM ==========
        print_header("üîÑ FASE 2: TRANSFORM - Transformaci√≥n de Datos")
        
        transformer = StockTransformer(raw_data)
        clean_data = transformer.transform_all()
        
        print("\nüìã Vista previa de datos limpios:")
        print(clean_data.head(3))
        
        # Reporte de transformaci√≥n
        report = transformer.get_transformation_report()
        print(f"\nüìà Resumen de transformaci√≥n:")
        print(f"   ‚Ä¢ Shape original: {report['original_shape']}")
        print(f"   ‚Ä¢ Shape limpio: {report['clean_shape']}")
        print(f"   ‚Ä¢ Nulos eliminados: {report['original_nulls']} ‚Üí {report['clean_nulls']}")
        
        # ========== FASE 3: LOAD ==========
        print_header("üíæ FASE 3: LOAD - Carga de Datos")
        
        loader = StockLoader(clean_data, output_dir="data")
        loader.load_all(base_name="stock_senti_clean")
        
        # Reporte de carga
        load_report = loader.get_load_report()
        print(f"\n‚úÖ Cargas exitosas: {load_report['successful_loads']}/{load_report['total_attempts']}")
        
        # ========== RESUMEN FINAL ==========
        print_header("‚ú® PIPELINE ETL COMPLETADO EXITOSAMENTE")
        
        print(f"\nüìÇ Archivos generados en el directorio 'data/':")
        print(f"   ‚úì stock_senti_clean.csv - Datos en formato CSV")
        print(f"   ‚úì stock_senti_clean.parquet - Datos en formato Parquet (comprimido)")
        print(f"   ‚úì stock_senti_clean.db - Base de datos SQLite")
        
        print(f"\nüìä Estad√≠sticas finales:")
        print(f"   ‚Ä¢ Total de registros procesados: {len(clean_data):,}")
        print(f"   ‚Ä¢ Columnas en dataset final: {len(clean_data.columns)}")
        print(f"   ‚Ä¢ Calidad de datos: {((1 - clean_data.isnull().sum().sum() / clean_data.size) * 100):.2f}% completo")
        
        print(f"\n‚è∞ Fin: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        print("\n" + "="*70)
        print("üí° Siguiente paso: Ejecutar notebooks/02_eda.ipynb para an√°lisis exploratorio")
        print("="*70 + "\n")
        
        return 0
        
    except FileNotFoundError as e:
        print(f"\n‚ùå Error: No se encontr√≥ el archivo de datos")
        print(f"   Detalle: {e}")
        print(f"   Soluci√≥n: Aseg√∫rate de que 'stock_senti_analysis.csv' est√© en el directorio ra√≠z")
        return 1
        
    except Exception as e:
        print(f"\n‚ùå Error inesperado durante la ejecuci√≥n del pipeline")
        print(f"   Detalle: {e}")
        print(f"   Tipo: {type(e).__name__}")
        import traceback
        traceback.print_exc()
        return 1


if __name__ == "__main__":
    exit_code = main()
    sys.exit(exit_code)
